{
  "projects": [
    {
      "id": "analytics_project",
      "name": "analytics_project",
      "description": "analytics_project dbt project",
      "path": "C:/Users/chara/OneDrive/Desktop/project/dbt-project/pk\\analytics_project"
    },
    {
      "id": "ecommerce_project",
      "name": "ecommerce_project",
      "description": "ecommerce_project dbt project",
      "path": "C:/Users/chara/OneDrive/Desktop/project/dbt-project/pk\\ecommerce_project"
    },
    {
      "id": "my_test_project",
      "name": "my_test_project",
      "description": "my_test_project dbt project",
      "path": "C:/Users/chara/OneDrive/Desktop/project/dbt-project/pk\\my_test_project"
    }
  ],
  "models": [
    {
      "id": "analytics_project_analytics_orders",
      "name": "analytics_orders",
      "project": "analytics_project",
      "description": "Aggregated order data combining ecommerce and test project datasets.",
      "schema": "analytics_schema_analytics_schema",
      "materialized": "view",
      "sql": "{{ config(\r\n    materialized='view',\r\n    schema='analytics_schema'\r\n) }}\r\n\r\nWITH ecommerce_orders AS (\r\n    -- Use source() to reference ecommerce models\r\n    SELECT * FROM {{ source('ecommerce_models', 'stg_orders') }}\r\n),\r\ntest_project_data AS (\r\n    -- Use source() to reference test project models\r\n    SELECT * FROM {{ source('test_project_models', 'my_first_dbt_model') }}\r\n)\r\n\r\nSELECT\r\n    eo.order_id,\r\n    eo.customer_id,\r\n    td.id as test_project_id,\r\n    td.amount as some_metric\r\nFROM ecommerce_orders eo\r\nLEFT JOIN test_project_data td\r\nON eo.customer_id = td.order_id",
      "columns": [
        {
          "name": "order_id",
          "type": "integer",
          "description": "This column, `order_id`, stores a unique integer identifier for each order within the `analytics_orders` table. It serves as the primary key for identifying individual orders, sourced from both ecommerce and test project datasets. This ID is used to join order information with customer and test project data.",
          "ai_description": "This column, `order_id`, stores a unique integer identifier for each order within the `analytics_orders` table. It serves as the primary key for identifying individual orders, sourced from both ecommerce and test project datasets. This ID is used to join order information with customer and test project data.",
          "user_edited": false
        },
        {
          "name": "customer_id",
          "type": "integer",
          "description": "The `customer_id` column in the `analytics_orders` table stores the unique identifier for a customer associated with an order. This integer value is crucial for linking orders from both ecommerce and test project datasets, enabling analysis of customer behavior across different platforms. It serves as the primary key for identifying the customer who placed the order.",
          "ai_description": "The `customer_id` column in the `analytics_orders` table stores the unique identifier for a customer associated with an order. This integer value is crucial for linking orders from both ecommerce and test project datasets, enabling analysis of customer behavior across different platforms. It serves as the primary key for identifying the customer who placed the order.",
          "user_edited": false
        },
        {
          "name": "test_project_id",
          "type": "integer",
          "description": "This column, `test_project_id`, stores the integer identifier of the test project associated with an order. It links orders in the `analytics_orders` table to specific test projects, enabling analysis of order behavior within those projects. This allows for the segmentation and analysis of order data based on the test project they are associated with.",
          "ai_description": "This column, `test_project_id`, stores the integer identifier of the test project associated with an order. It links orders in the `analytics_orders` table to specific test projects, enabling analysis of order behavior within those projects. This allows for the segmentation and analysis of order data based on the test project they are associated with.",
          "user_edited": false
        },
        {
          "name": "some_metric",
          "type": "numeric",
          "description": "`some_metric` represents the numeric amount associated with either an ecommerce order or a test project.  In the `analytics_orders` table, this column aggregates order amounts from ecommerce and test project datasets.  This value likely represents the financial value of an order or the amount tied to a specific test project.",
          "ai_description": "`some_metric` represents the numeric amount associated with either an ecommerce order or a test project.  In the `analytics_orders` table, this column aggregates order amounts from ecommerce and test project datasets.  This value likely represents the financial value of an order or the amount tied to a specific test project.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\analytics_orders.sql"
    },
    {
      "id": "analytics_project_my_first_dbt_model",
      "name": "my_first_dbt_model",
      "project": "analytics_project",
      "description": "This dbt model, `my_first_dbt_model`, creates a table named `my_first_dbt_model` within the `analytics_project`. It generates a single column, `id`, which contains the integer value 1 and a null value. The model serves as a basic example, demonstrating how to define a dbt model and configure its materialization as a table. The SQL code includes a commented-out filter to remove null `id` values, showcasing a potential data transformation.",
      "schema": "analytics_schema",
      "materialized": "table",
      "sql": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null",
      "columns": [
        {
          "name": "id",
          "type": "integer",
          "description": "The `id` column in the `my_first_dbt_model` table stores integer values, specifically the number 1 and a null value. This column serves as a simple identifier within the model, demonstrating the creation of a table and the inclusion of a basic data point. While the current model includes a null value, the commented-out SQL suggests the potential for filtering out these nulls, indicating a possible future data cleaning step.",
          "ai_description": "The `id` column in the `my_first_dbt_model` table stores integer values, specifically the number 1 and a null value. This column serves as a simple identifier within the model, demonstrating the creation of a table and the inclusion of a basic data point. While the current model includes a null value, the commented-out SQL suggests the potential for filtering out these nulls, indicating a possible future data cleaning step.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\my_first_dbt_model.sql",
      "ai_description": "This dbt model, `my_first_dbt_model`, creates a table named `my_first_dbt_model` within the `analytics_project`. It generates a single column, `id`, which contains the integer value 1 and a null value. The model serves as a basic example, demonstrating how to define a dbt model and configure its materialization as a table. The SQL code includes a commented-out filter to remove null `id` values, showcasing a potential data transformation.",
      "user_edited": false
    },
    {
      "id": "analytics_project_my_second_dbt_model",
      "name": "my_second_dbt_model",
      "project": "analytics_project",
      "description": "Here's a description of the `my_second_dbt_model` dbt model:\n\nThis dbt model, part of the `analytics_project`, selects a subset of data from the `my_first_dbt_model`. It filters the data to include only the row where the `id` column equals 1. This model produces a table containing a single row, representing a specific record from the upstream model. Its role in the data pipeline is to provide a focused view of a particular data point, potentially for specific reporting or analysis purposes.",
      "schema": "analytics_schema",
      "materialized": "view",
      "sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1",
      "columns": [
        {
          "name": "id",
          "type": "integer",
          "description": "This column stores the unique identifier for a specific record, inherited from the `my_first_dbt_model`.  In this model, the `id` column always contains the value `1`, representing a single, pre-selected record. This allows for focused analysis of this particular record within the context of the `analytics_project`.",
          "ai_description": "This column stores the unique identifier for a specific record, inherited from the `my_first_dbt_model`.  In this model, the `id` column always contains the value `1`, representing a single, pre-selected record. This allows for focused analysis of this particular record within the context of the `analytics_project`.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\my_second_dbt_model.sql",
      "ai_description": "Here's a description of the `my_second_dbt_model` dbt model:\n\nThis dbt model, part of the `analytics_project`, selects a subset of data from the `my_first_dbt_model`. It filters the data to include only the row where the `id` column equals 1. This model produces a table containing a single row, representing a specific record from the upstream model. Its role in the data pipeline is to provide a focused view of a particular data point, potentially for specific reporting or analysis purposes.",
      "user_edited": false
    },
    {
      "id": "ecommerce_project_my_first_dbt_model",
      "name": "my_first_dbt_model",
      "project": "ecommerce_project",
      "description": "A starter dbt model",
      "schema": "ecommerce",
      "materialized": "table",
      "sql": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null",
      "columns": [
        {
          "name": "id",
          "type": "integer",
          "description": "The `id` column stores integer values representing unique identifiers for each record in the `my_first_dbt_model`.  In this starter model, the `id` column serves as a simple primary key, demonstrating the basic structure of a table and the use of unique identifiers.  The provided SQL context suggests this column might be used for filtering out null values, which is a common data cleaning practice.",
          "ai_description": "The `id` column stores integer values representing unique identifiers for each record in the `my_first_dbt_model`.  In this starter model, the `id` column serves as a simple primary key, demonstrating the basic structure of a table and the use of unique identifiers.  The provided SQL context suggests this column might be used for filtering out null values, which is a common data cleaning practice.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\my_first_dbt_model.sql"
    },
    {
      "id": "ecommerce_project_my_second_dbt_model",
      "name": "my_second_dbt_model",
      "project": "ecommerce_project",
      "description": "A starter dbt model",
      "schema": "ecommerce",
      "materialized": "view",
      "sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1",
      "columns": [
        {
          "name": "id",
          "type": "integer",
          "description": "The `id` column stores integer values, likely representing a unique identifier for each record in the `my_second_dbt_model` table. This column is used for joining with other models, as seen in the SQL context, and filtering data. While the specific business meaning isn't clear from the context, it's a fundamental key for identifying and referencing individual rows.",
          "ai_description": "The `id` column stores integer values, likely representing a unique identifier for each record in the `my_second_dbt_model` table. This column is used for joining with other models, as seen in the SQL context, and filtering data. While the specific business meaning isn't clear from the context, it's a fundamental key for identifying and referencing individual rows.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\my_second_dbt_model.sql"
    },
    {
      "id": "ecommerce_project_stg_orders",
      "name": "stg_orders",
      "project": "ecommerce_project",
      "description": "Staging model for raw orders data in the e-commerce domain.",
      "schema": "ecommerce_ecommerce_schema",
      "materialized": "view",
      "sql": "{{ config(\r\n    materialized='view',\r\n    schema='ecommerce_schema',\r\n    alias='stg_orders'\r\n) }}\r\n\r\nSELECT\r\n    order_id,\r\n    customer_id,\r\n    order_date,\r\n    status\r\nFROM {{ source('ecommerce_source', 'raw_orders') }}",
      "columns": [
        {
          "name": "order_id",
          "type": "integer",
          "description": "`order_id`: This integer column uniquely identifies each order within the `stg_orders` staging model. It serves as the primary key for the order data, allowing for the identification and tracking of individual orders extracted from the raw orders source. This ID is crucial for joining with other tables and analyzing order-specific information.",
          "ai_description": "`order_id`: This integer column uniquely identifies each order within the `stg_orders` staging model. It serves as the primary key for the order data, allowing for the identification and tracking of individual orders extracted from the raw orders source. This ID is crucial for joining with other tables and analyzing order-specific information.",
          "user_edited": false
        },
        {
          "name": "customer_id",
          "type": "integer",
          "description": "This column, `customer_id`, stores the unique identifier for the customer associated with each order.  Within the `stg_orders` staging model, this integer value links each order to a specific customer, enabling analysis of customer purchase behavior.  It's a direct mapping from the raw orders data, serving as a key for joining with customer-related tables.",
          "ai_description": "This column, `customer_id`, stores the unique identifier for the customer associated with each order.  Within the `stg_orders` staging model, this integer value links each order to a specific customer, enabling analysis of customer purchase behavior.  It's a direct mapping from the raw orders data, serving as a key for joining with customer-related tables.",
          "user_edited": false
        },
        {
          "name": "order_date",
          "type": "date",
          "description": "The `order_date` column in the `stg_orders` staging table stores the date when an order was placed. This column is crucial for understanding the temporal aspect of orders, enabling analysis of sales trends, order volume over time, and cohort analysis. It is directly sourced from the raw orders data.",
          "ai_description": "The `order_date` column in the `stg_orders` staging table stores the date when an order was placed. This column is crucial for understanding the temporal aspect of orders, enabling analysis of sales trends, order volume over time, and cohort analysis. It is directly sourced from the raw orders data.",
          "user_edited": false
        },
        {
          "name": "status",
          "type": "character varying(20)",
          "description": "The `status` column in the `stg_orders` table stores the current order status, such as \"pending,\" \"shipped,\" or \"delivered.\" This column is crucial for tracking the lifecycle of an order within the staging model, allowing analysts to understand the order's progression. The values likely reflect the order's state as pulled from the raw source data.",
          "ai_description": "The `status` column in the `stg_orders` table stores the current order status, such as \"pending,\" \"shipped,\" or \"delivered.\" This column is crucial for tracking the lifecycle of an order within the staging model, allowing analysts to understand the order's progression. The values likely reflect the order's state as pulled from the raw source data.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\stg_orders.sql"
    },
    {
      "id": "my_test_project_my_first_dbt_model",
      "name": "my_first_dbt_model",
      "project": "my_test_project",
      "description": "A starter dbt model",
      "schema": "my_test_my_test",
      "materialized": "table",
      "sql": "{{ config(\n    materialized='table',\n    schema='my_test',\n    alias='my_first_dbt_model'\n) }}\n\nSELECT\n    transaction_id as id,\n    order_id,\n    amount,\n    transaction_date\nFROM {{ source('my_test_project', 'raw_transactions') }}\nWHERE transaction_id IS NOT NULL",
      "columns": [
        {
          "name": "id",
          "type": "integer",
          "description": "This column, `id`, stores the unique identifier for each transaction, derived from the `transaction_id` in the source data. It serves as the primary key for the `my_first_dbt_model` table, enabling the identification and tracking of individual transactions. No apparent business logic or calculations are applied to this column.",
          "ai_description": "This column, `id`, stores the unique identifier for each transaction, derived from the `transaction_id` in the source data. It serves as the primary key for the `my_first_dbt_model` table, enabling the identification and tracking of individual transactions. No apparent business logic or calculations are applied to this column.",
          "user_edited": false
        },
        {
          "name": "order_id",
          "type": "integer",
          "description": "The `order_id` column stores the unique identifier associated with each order within the `my_first_dbt_model`. This integer value links transactions to specific orders, enabling analysis of order-level metrics such as total order value. This column is crucial for aggregating transaction data to understand order behavior.",
          "ai_description": "The `order_id` column stores the unique identifier associated with each order within the `my_first_dbt_model`. This integer value links transactions to specific orders, enabling analysis of order-level metrics such as total order value. This column is crucial for aggregating transaction data to understand order behavior.",
          "user_edited": false
        },
        {
          "name": "amount",
          "type": "numeric",
          "description": "The `amount` column stores the monetary value of each transaction, representing the financial value associated with the transaction. This numeric value is crucial for calculating total order values, analyzing revenue, and understanding the financial performance of orders within the `my_first_dbt_model`. It directly reflects the transaction's financial impact.",
          "ai_description": "The `amount` column stores the monetary value of each transaction, representing the financial value associated with the transaction. This numeric value is crucial for calculating total order values, analyzing revenue, and understanding the financial performance of orders within the `my_first_dbt_model`. It directly reflects the transaction's financial impact.",
          "user_edited": false
        },
        {
          "name": "transaction_date",
          "type": "date",
          "description": "This column, `transaction_date`, stores the date on which a transaction occurred. It's used to track the timing of each transaction, enabling analysis of trends and performance over time. This date is pulled from the raw transactions table and is essential for any time-based reporting or aggregation.",
          "ai_description": "This column, `transaction_date`, stores the date on which a transaction occurred. It's used to track the timing of each transaction, enabling analysis of trends and performance over time. This date is pulled from the raw transactions table and is essential for any time-based reporting or aggregation.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\my_first_dbt_model.sql"
    },
    {
      "id": "my_test_project_my_second_dbt_model",
      "name": "my_second_dbt_model",
      "project": "my_test_project",
      "description": "A starter dbt model",
      "schema": "my_test",
      "materialized": "view",
      "sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1",
      "columns": [
        {
          "name": "id",
          "type": "integer",
          "description": "The `id` column stores integer values representing unique identifiers. In this model, it likely serves as a primary key inherited from the `my_first_dbt_model` table, used for joining and filtering data. The value `1` in the SQL context suggests this column is used to select a specific record.",
          "ai_description": "The `id` column stores integer values representing unique identifiers. In this model, it likely serves as a primary key inherited from the `my_first_dbt_model` table, used for joining and filtering data. The value `1` in the SQL context suggests this column is used to select a specific record.",
          "user_edited": false
        },
        {
          "name": "order_id",
          "type": "integer",
          "description": "The `order_id` column stores a unique integer identifier for each order within the `my_second_dbt_model`. This column serves as a primary key, enabling the linking of order-specific information from other models (like `my_first_dbt_model`) and facilitating order-level analysis. While no calculation is apparent in this context, the `order_id` is crucial for joining and filtering order data.",
          "ai_description": "The `order_id` column stores a unique integer identifier for each order within the `my_second_dbt_model`. This column serves as a primary key, enabling the linking of order-specific information from other models (like `my_first_dbt_model`) and facilitating order-level analysis. While no calculation is apparent in this context, the `order_id` is crucial for joining and filtering order data.",
          "user_edited": false
        },
        {
          "name": "amount",
          "type": "numeric",
          "description": "The `amount` column in the `my_second_dbt_model` table stores numerical values, likely representing a monetary value or quantity.  This column likely reflects an amount associated with a specific record, potentially derived from the `my_first_dbt_model` based on the provided SQL context.  Without further context, the exact business meaning is unclear, but it's a key numeric field for analysis within this starter dbt model.",
          "ai_description": "The `amount` column in the `my_second_dbt_model` table stores numerical values, likely representing a monetary value or quantity.  This column likely reflects an amount associated with a specific record, potentially derived from the `my_first_dbt_model` based on the provided SQL context.  Without further context, the exact business meaning is unclear, but it's a key numeric field for analysis within this starter dbt model.",
          "user_edited": false
        },
        {
          "name": "transaction_date",
          "type": "date",
          "description": "This column, `transaction_date`, stores the date associated with each transaction. It's used to filter and analyze transactions within the `my_second_dbt_model`, likely enabling time-based reporting and trend analysis.  The data type `date` suggests this column represents a specific calendar date.",
          "ai_description": "This column, `transaction_date`, stores the date associated with each transaction. It's used to filter and analyze transactions within the `my_second_dbt_model`, likely enabling time-based reporting and trend analysis.  The data type `date` suggests this column represents a specific calendar date.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\my_second_dbt_model.sql"
    },
    {
      "id": "my_test_project_stg_campaigns",
      "name": "stg_campaigns",
      "project": "my_test_project",
      "description": "The `stg_campaigns` dbt model in the `my_test_project` project serves as a staging layer for campaign data. It selects and transforms data from the `public.raw_campaigns` source, extracting key campaign attributes. This model produces a clean, standardized dataset containing campaign identifiers, names, start and end dates, and budgets. It acts as a foundational building block in the data pipeline, providing a curated view of raw campaign data for downstream analysis and reporting, without any complex transformations or business logic applied.",
      "schema": "my_test",
      "materialized": "view",
      "sql": "-- models/example/stg_campaigns.sql\r\nSELECT\r\n    campaign_id,\r\n    campaign_name,\r\n    start_date,\r\n    end_date,\r\n    budget\r\nFROM public.raw_campaigns",
      "columns": [
        {
          "name": "campaign_id",
          "type": "integer",
          "description": "This column, `campaign_id`, stores a unique integer identifier for each marketing campaign.  Within the `stg_campaigns` model, this ID is used to uniquely identify each campaign, ensuring data integrity and enabling joins with other tables.  It's a direct representation of the campaign identifier from the raw source data.",
          "ai_description": "This column, `campaign_id`, stores a unique integer identifier for each marketing campaign.  Within the `stg_campaigns` model, this ID is used to uniquely identify each campaign, ensuring data integrity and enabling joins with other tables.  It's a direct representation of the campaign identifier from the raw source data.",
          "user_edited": false
        },
        {
          "name": "campaign_name",
          "type": "character varying(100)",
          "description": "This column, `campaign_name`, stores the name of the marketing campaign.  Within the `stg_campaigns` model, it provides a human-readable identifier for each campaign, sourced directly from the raw campaign data.  No calculations or transformations are applied to this field in the staging layer.",
          "ai_description": "This column, `campaign_name`, stores the name of the marketing campaign.  Within the `stg_campaigns` model, it provides a human-readable identifier for each campaign, sourced directly from the raw campaign data.  No calculations or transformations are applied to this field in the staging layer.",
          "user_edited": false
        },
        {
          "name": "start_date",
          "type": "date",
          "description": "The `start_date` column stores the date when a campaign is scheduled to begin. This date, extracted directly from the raw campaign data, is crucial for understanding the campaign's lifecycle and is used for time-based analysis and reporting within the `stg_campaigns` model. No calculations or transformations are applied to this date in this staging layer.",
          "ai_description": "The `start_date` column stores the date when a campaign is scheduled to begin. This date, extracted directly from the raw campaign data, is crucial for understanding the campaign's lifecycle and is used for time-based analysis and reporting within the `stg_campaigns` model. No calculations or transformations are applied to this date in this staging layer.",
          "user_edited": false
        },
        {
          "name": "end_date",
          "type": "date",
          "description": "The `end_date` column stores the date when the campaign concluded. This date is extracted directly from the raw campaign data and is crucial for defining the campaign's active period within the `stg_campaigns` staging model. No calculations or business logic are applied to this date; it represents the raw end date as provided in the source data.",
          "ai_description": "The `end_date` column stores the date when the campaign concluded. This date is extracted directly from the raw campaign data and is crucial for defining the campaign's active period within the `stg_campaigns` staging model. No calculations or business logic are applied to this date; it represents the raw end date as provided in the source data.",
          "user_edited": false
        },
        {
          "name": "budget",
          "type": "numeric",
          "description": "The `budget` column in the `stg_campaigns` model stores the numeric budget allocated to each marketing campaign. This value, directly extracted from the `raw_campaigns` source, represents the total financial resources assigned to a specific campaign. No calculations or transformations are applied to this budget value within this staging model.",
          "ai_description": "The `budget` column in the `stg_campaigns` model stores the numeric budget allocated to each marketing campaign. This value, directly extracted from the `raw_campaigns` source, represents the total financial resources assigned to a specific campaign. No calculations or transformations are applied to this budget value within this staging model.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\stg_campaigns.sql",
      "ai_description": "The `stg_campaigns` dbt model in the `my_test_project` project serves as a staging layer for campaign data. It selects and transforms data from the `public.raw_campaigns` source, extracting key campaign attributes. This model produces a clean, standardized dataset containing campaign identifiers, names, start and end dates, and budgets. It acts as a foundational building block in the data pipeline, providing a curated view of raw campaign data for downstream analysis and reporting, without any complex transformations or business logic applied.",
      "user_edited": false
    },
    {
      "id": "my_test_project_stg_orders",
      "name": "stg_orders",
      "project": "my_test_project",
      "description": "Staging model for raw orders data",
      "schema": "my_test",
      "materialized": "view",
      "sql": "-- models/stg_orders.sql\r\nSELECT\r\n    order_id,\r\n    customer_id,\r\n    order_date,\r\n    status\r\nFROM public.raw_orders",
      "columns": [
        {
          "name": "order_id",
          "type": "integer",
          "description": "This column contains a unique integer identifier for each order. In the `stg_orders` staging model, `order_id` serves as the primary key, enabling the identification and tracking of individual orders as they are processed from the raw data. This ID is crucial for joining with other tables and analyzing order-specific information.",
          "ai_description": "This column contains a unique integer identifier for each order. In the `stg_orders` staging model, `order_id` serves as the primary key, enabling the identification and tracking of individual orders as they are processed from the raw data. This ID is crucial for joining with other tables and analyzing order-specific information.",
          "user_edited": false
        },
        {
          "name": "customer_id",
          "type": "integer",
          "description": "The `customer_id` column stores the unique identifier for the customer associated with each order. This integer value is crucial for linking orders to customer profiles within the `stg_orders` staging model, enabling analysis of customer purchasing behavior. It directly reflects the customer who placed the order, pulled from the raw orders data.",
          "ai_description": "The `customer_id` column stores the unique identifier for the customer associated with each order. This integer value is crucial for linking orders to customer profiles within the `stg_orders` staging model, enabling analysis of customer purchasing behavior. It directly reflects the customer who placed the order, pulled from the raw orders data.",
          "user_edited": false
        },
        {
          "name": "order_date",
          "type": "date",
          "description": "This column, `order_date`, stores the date when an order was placed. In the `stg_orders` staging model, it represents the raw order date extracted from the `raw_orders` table. This date is crucial for analyzing order trends, calculating order lifecycles, and performing time-based aggregations.",
          "ai_description": "This column, `order_date`, stores the date when an order was placed. In the `stg_orders` staging model, it represents the raw order date extracted from the `raw_orders` table. This date is crucial for analyzing order trends, calculating order lifecycles, and performing time-based aggregations.",
          "user_edited": false
        },
        {
          "name": "status",
          "type": "character varying(20)",
          "description": "The `status` column in the `stg_orders` staging model stores the order status as a text string, such as \"shipped\" or \"pending\". This column reflects the current state of an order, as extracted from the raw orders data, and is crucial for understanding the order lifecycle.",
          "ai_description": "The `status` column in the `stg_orders` staging model stores the order status as a text string, such as \"shipped\" or \"pending\". This column reflects the current state of an order, as extracted from the raw orders data, and is crucial for understanding the order lifecycle.",
          "user_edited": false
        }
      ],
      "file_path": "models\\example\\stg_orders.sql"
    },
    {
      "id": "my_test_project_raw_campaigns",
      "name": "raw_campaigns",
      "project": "my_test_project",
      "description": "Direct reference table raw_campaigns in schema public",
      "schema": "public",
      "materialized": "source",
      "is_source": true
    },
    {
      "id": "my_test_project_raw_orders",
      "name": "raw_orders",
      "project": "my_test_project",
      "description": "Direct reference table raw_orders in schema public",
      "schema": "public",
      "materialized": "source",
      "is_source": true
    }
  ],
  "lineage": [
    {
      "source": "analytics_project_my_first_dbt_model",
      "target": "analytics_project_my_second_dbt_model",
      "ref_type": "ref"
    },
    {
      "source": "ecommerce_project_my_first_dbt_model",
      "target": "ecommerce_project_my_second_dbt_model",
      "ref_type": "ref"
    },
    {
      "source": "my_test_project_my_first_dbt_model",
      "target": "my_test_project_my_second_dbt_model",
      "ref_type": "ref"
    },
    {
      "source": "my_test_project_raw_campaigns",
      "target": "my_test_project_stg_campaigns",
      "ref_type": "direct_reference"
    },
    {
      "source": "my_test_project_raw_orders",
      "target": "my_test_project_stg_orders",
      "ref_type": "direct_reference"
    },
    {
      "source": "ecommerce_project_stg_orders",
      "target": "analytics_project_analytics_orders",
      "ref_type": "cross_project_source"
    },
    {
      "source": "my_test_project_my_first_dbt_model",
      "target": "analytics_project_analytics_orders",
      "ref_type": "cross_project_source"
    }
  ]
}